class Solution {
    public void helper(char[][] board,int r,int c,char[][] ans){
        if(c==9){
            r++;
            c=0;
        }
        if(r==9){
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    board[i][j] = ans[i][j];
                }
            }
            return ;
        }
        else if(ans[r][c]!='.'){
            helper(board,r,c+1,ans);
            return;
        }
        else if(ans[r][c]=='.'){
            for(int i=1;i<=9;i++){
                if(possible(ans,r,c,i)){
                    ans[r][c]=(char)(48+i);
                    helper(board,r,c+1,ans);
                    ans[r][c]='.';
                }
            }
        }

    }
    public boolean possible(char[][] arr,int r,int c,int val){
        int col=0;
        while(col<9){
            if( arr[r][col]!='.' && arr[r][col]-'0'==val)return false;
            col++;
        }
        int row=0;
        while(row<9){
            if( arr[row][c]!='.' && arr[row][c]-'0'==val)return false;
            row++;
        }
        row=(r/3)*3;
        col=(c/3)*3;
        for(int i=row;i<row+3;i++){
            for(int j=col;j<col+3;j++){
                if(arr[i][j]!='.' && arr[i][j]-'0'==val)return false;
            }
        }
        return true;
    }
    public void solveSudoku(char[][] board) {
        
        char[][] ans=new char[9][9];
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                // if(ans[i][j]=='.')System.out.println("hello");
                ans[i][j]=board[i][j];
            }
        }
        helper(board,0,0,ans);
        
    }
}
